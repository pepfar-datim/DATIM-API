% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getMetadataEndpoint.R
\name{.getMetadataEndpoint}
\alias{.getMetadataEndpoint}
\alias{getCategories}
\alias{getCatCombos}
\alias{getCatOptionCombos}
\alias{getCatOptionGroupSets}
\alias{getCatOptionGroups}
\alias{getCatOptions}
\alias{getDataElementGroupSets}
\alias{getDataElementGroups}
\alias{getDataElements}
\alias{getDataSets}
\alias{getIndicatorGroupSets}
\alias{getIndicatorGroups}
\alias{getIndicators}
\alias{getOptionGroupSets}
\alias{getOptionGroups}
\alias{getOptionSets}
\alias{getOptions}
\alias{getOrgUnitGroupSets}
\alias{getOrgUnitGroups}
\alias{getOrgUnits}
\alias{getDimensions}
\title{getMetadataEndpoint}
\usage{
.getMetadataEndpoint(end_point, values, by, fields, base_url, retry)

getCategories(values, by, fields, base_url, retry)

getCatCombos(values, by, fields, base_url, retry)

getCatOptionCombos(values, by, fields, base_url, retry)

getCatOptionGroupSets(values, by, fields, base_url, retry)

getCatOptionGroups(values, by, fields, base_url, retry)

getCatOptions(values, by, fields, base_url, retry)

getDataElementGroupSets(values, by, fields, base_url, retry)

getDataElementGroups(values, by, fields, base_url, retry)

getDataElements(values, by, fields, base_url, retry)

getDataSets(values, by, fields, base_url, retry)

getIndicatorGroupSets(values, by, fields, base_url, retry)

getIndicatorGroups(values, by, fields, base_url, retry)

getIndicators(values, by, fields, base_url, retry)

getOptionGroupSets(values, by, fields, base_url, retry)

getOptionGroups(values, by, fields, base_url, retry)

getOptionSets(values, by, fields, base_url, retry)

getOptions(values, by, fields, base_url, retry)

getOrgUnitGroupSets(values, by, fields, base_url, retry)

getOrgUnitGroups(values, by, fields, base_url, retry)

getOrgUnits(values, by, fields, base_url, retry)

getDimensions(values, by, fields, base_url, retry)

getCategories(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getCatCombos(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getCatOptionCombos(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getCatOptionGroupSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getCatOptionGroups(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getCatOptions(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getDataElementGroupSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getDataElementGroups(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getDataElements(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getDataSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getIndicatorGroupSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getIndicatorGroups(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getIndicators(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOptionGroupSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOptionGroups(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOptionSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOptions(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOrgUnitGroupSets(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOrgUnitGroups(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getOrgUnits(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)

getDimensions(
  values,
  by = "id",
  fields = NULL,
  base_url = getOption("baseurl"),
  retry = 1
)
}
\arguments{
\item{end_point}{the endpoint to use}

\item{values}{- string vector of identifiers that will be used in the filter
e.g. vector of uids, names, or codes.}

\item{by}{- what to filter by, i.e. id or name, default is id}

\item{fields}{- the fields, which can come in any formt as long as all
components are present}

\item{base_url}{string - base address of instance (text before api/ in URL)}

\item{retry}{the number of times to try the call}
}
\value{
the metadata response in json format and flattened
}
\description{
wrapper to getMetadata that retrieves a metadata endpoint
}
